#!/usr/bin/env node

'use strict';

var fs = require('fs');     
var PEG = require('pegjs'); 
var program = require('commander');
var config = require('../config').config;
var version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;
var name = "mpg v" + version;
var description = "Maaperture parser generator - Alberto Garbui (aka JK)";

function printHelpTitle() {
	console.log('');
	console.log('  -------------------------------------------------------');
	console.log('   ' + name);
	console.log('');
	console.log('   ' + description);
	console.log('  -------------------------------------------------------');
}

var generateParser = function(grammar_file, output_parser_file) {
	
	var grammaticaDSL = fs.readFileSync(grammar_file).toString();
	
	var parser = PEG.buildParser(	grammaticaDSL, { 					//grammar (string)
									cache: config.pegjs.cache,			//pegjs config (see config.js)
									//allowedStartRules: config.pegjs.allowedStartRules,
									output: config.pegjs.output,
									optimize: config.pegjs.optimize,
									plugins: config.pegjs.plugins
								});	
								
	parser = "module.exports = " + parser + ";";
	
	var result;
	try{
		result = fs.writeFileSync(output_parser_file, parser, 'utf-8');
		console.log('well done! Maaperture parser file saved: ' + program.output);
	}catch(err){
		console.error('error while writing: ' + output_parser_file);
		throw err;
	}
	
}

function testParser(parser_file, dsl_file, output_file) {

	var workingDir = process.cwd();
	
	try{
		var parserTest = require(workingDir + '/' + parser_file);
	}catch(err){
		console.error('parser reading error!');
		throw err; 
	}
	
	var DSLstring = fs.readFileSync(dsl_file).toString();

	try {
		var result = parserTest.parse(DSLstring);
	} catch(err) {
	  	console.error('parsing error!');
		console.error('check your dsl file: ' + dsl_file);
		throw err; 
	}
			
	console.log('errors checking...');
	//test se il risultato è in formato JSON
	result = JSON.stringify(result, null, '\t');
	try {
		var risultatoJSON = JSON.parse(result);
	} catch(err) {
		console.error('parsing result error! [invalid_JSON]');
		console.error('check maaperture dsl parser: ' + parser_file);
		throw err; 
	}
			
	//salvo su file
	console.log('saving ' + output_file);
	fs.writeFileSync(output_file, result, 'utf-8', function (err) {
			if (err) {
				console.log("error writing result file!");
				throw err;
			} 
		}
	);
}

program
	.version(version)
	.usage('<command> [options]')
	.option('-G, --grammar <grammar_file>', 'specify the input grammar')
	.option('-P, --parser <parser_file>', 'specify the parser file to test')
	.option('-D, --dsl <dsl_file>', 'specify the dsl file to test')
	.option('-O, --output <output_file>', 'specify the output file')
	
 program
	.command('generate')
	.description('generate a parser from a grammar file')
	.action(function(){
		if(program.grammar && program.output){
			printHelpTitle();
			console.log('');
			console.log('generating parser into ' + program.output + ' ...');
			generateParser(program.grammar, program.output);	
		}else{
			printHelpTitle();
			program.help();
		}
	});
	
program
	.command('test')
	.description('test a parser against a dsl file')
	.action(function(){
		if(program.parser && program.dsl && program.output){
			printHelpTitle();
			console.log('');
			//console.log('testing parser ' + program.parser + ' against ' + program.dsl + ' ...');
			testParser(program.parser, program.dsl, program.output); 
		}else{
			printHelpTitle();
			program.help();
		}
	});
	
program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ mpg generate -G maaperture_dsl_grammar.js -O DSLParser.js');
  console.log('    $ mpg test -P DSLParser.js -D example.dsl -O result.json');
  console.log('');
});

program.unknownOption = function(){
	printHelpTitle();
	program.help();
}

program.on('*', function(){
	printHelpTitle();
	program.help();
});

program
	.parse(process.argv);
	
if (process.argv.length < 5) {
	printHelpTitle();
	program.help();
}
